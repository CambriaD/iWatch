C51 COMPILER V9.54   PCF8563                                                               12/04/2020 22:56:48 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE PCF8563
OBJECT MODULE PLACED IN ..\Objects\PCF8563.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\User\Rtc\PCF8563.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\User\Syst
                    -em;..\User\Sensor;..\User\Rtc;..\User\Radio;..\User\Oled;..\User\Bluetooth;..\User) DEBUG OBJECTEXTEND PRINT(..\Listings
                    -\PCF8563.lst) TABS(2) OBJECT(..\Objects\PCF8563.obj)

line level    source

   1          #include "IIC.h"
   2          #include "PCF8563.h"
   3          
   4          /**
   5            * @brief  使用IIC总线往PCF8563的寄存器中写一字节数据
   6            * @param  addr: 寄存器的地址
   7            * @param  dat:  待写入的数据
   8            * @retval None
   9            */
  10          void PCF8563WriteByte(unsigned char addr, unsigned char dat)
  11          {
  12   1        Single_WriteIIC(PCF8563_IIC_ADDR, addr, dat);
  13   1      }
  14          /**
  15            * @brief  使用IIC总线从PCF8563的寄存器中读一字节数据
  16            * @param  addr: 寄存器的地址
  17            * @retval 读出的一字节数据
  18            */
  19          unsigned char PCF8563ReadByte(unsigned char addr)
  20          {
  21   1        unsigned char temp;
  22   1        temp = Single_ReadIIC(PCF8563_IIC_ADDR,addr);
  23   1        return temp;
  24   1      }
  25          /**
  26            * @brief  置位或清除PCF8563寄存器中的指定位
  27            * @param  addr: 寄存器的地址
  28            *         bit_mask：指定位
  29            *         SC：0 清除
  30            *             1 置位
  31            * @retval 无
  32            */
  33          void PCF8563SetRegisterBits(unsigned char addr, unsigned char bit_mask, unsigned char SC)
  34          {
  35   1        unsigned char temp;
  36   1        temp = PCF8563ReadByte(addr);
  37   1        if(SC == 1)
  38   1          temp |= bit_mask;
  39   1        else if(SC == 0)
  40   1          temp &= ~bit_mask;
  41   1        PCF8563WriteByte(addr, temp);
  42   1      }
  43          /**
  44            * @brief  读取PCF8563中的时间并存在时间结构体中
  45            * @param  t：pcf8563_time型结构体的指针
  46            * @retval None
  47            */
  48          void PCF8563ReadTime(struct pcf8563_time *t)
  49          {
  50   1        unsigned char buf[7];
  51   1        I2C_Read_MultiBytes(PCF8563_IIC_ADDR, VL_SECONDS, 7, buf);
  52   1        buf[0] &= 0x7f;
  53   1        t->second = (buf[0] >> 4) * 10 + (buf[0] & 0x0f);
C51 COMPILER V9.54   PCF8563                                                               12/04/2020 22:56:48 PAGE 2   

  54   1        buf[1] &= 0x7f;
  55   1        t->minute = (buf[1] >> 4) * 10 + (buf[1] & 0x0f);
  56   1        buf[2] &= 0x3f;
  57   1        t->hour   = (buf[2] >> 4) * 10 + (buf[2] & 0x0f);
  58   1        buf[3] &= 0x3f;
  59   1        t->day    = (buf[3] >> 4) * 10 + (buf[3] & 0x0f);
  60   1        buf[4] &= 0x07;
  61   1        if(buf[4] == 0)
  62   1          buf[4] = 7;
  63   1        t->weekday = buf[4];
  64   1        if(buf[5] & 0x80 == 0x80)
  65   1          t->century += 1;
  66   1        buf[5] &= 0x1f;
  67   1        t->month = (buf[5] >> 4) * 10 + (buf[5] & 0x0f);
  68   1        t->year = (unsigned int)buf[6] + 2000;
  69   1      }
  70          /**
  71            * @brief  设置时间，输入十进制时间参数
  72            *         例：PCF8563WriteTime(23, 59, 50); 设定时间为12：59：50
  73            * @param  hour,min,sec：小时，分钟，秒钟
  74            * @retval None
  75            */
  76          void PCF8563WriteTime(unsigned char hour, unsigned char min, unsigned char sec)
  77          {
  78   1        PCF8563WriteByte(VL_SECONDS, ((sec / 10) << 4) | (sec % 10));
  79   1        PCF8563WriteByte(MINUTES, ((min / 10) << 4) | (min % 10));
  80   1        PCF8563WriteByte(HOURS, ((hour / 10) << 4) | (hour % 10));
  81   1      }
  82          /**
  83            * @brief  设置日期，输入十进制日期参数
  84            *         例：PCF8563WriteDate(2020, 3, 3, 1);
  85            *         设定日期为2020年3月3日周一
  86            * @param  year,month,day,weekday：年，月，日，星期(周一至周七对应1~7)
  87            * @retval None
  88            */
  89          void PCF8563WriteDate(unsigned int year, unsigned char month, unsigned char day, unsigned char weekday)
  90          {
  91   1        year -= 2000;
  92   1        PCF8563WriteByte(YEARS, (unsigned char)year);
  93   1        PCF8563WriteByte(CENTURY_MOUTHS, ((month / 10) << 4) | (month % 10));
  94   1        PCF8563WriteByte(DAYS, ((day / 10) << 4) | (day % 10));
  95   1        if(weekday == 7)
  96   1          weekday = 0;
  97   1        PCF8563WriteByte(WEEKDAYS, weekday);
  98   1      }
  99          /**
 100            * @brief  设置闹钟
 101            * @param  hour,min：小时，分钟
 102            *         day,weekday：日，星期(周一至周七对应1~7)
 103            *         mode：闹钟的模式
 104            *           ALARM_DISABLE       关闭闹钟
 105            *           ALARM_ONCE          单次有效
 106            *           ALARM_EVERYDAY      每天都响
 107            *           ALARM_WORKDAY       工作日响
 108            *           ALARM_SPECIFIC_DAY  指定某一天响
 109            * @retval None
 110            */
 111          void PCF8563SetAlarm(unsigned char hour, unsigned char min, unsigned char weekday, unsigned char day, unsi
             -gned char mode)
 112          {
 113   1        unsigned char temp1 = 0;
 114   1        unsigned char temp2 = 0;
C51 COMPILER V9.54   PCF8563                                                               12/04/2020 22:56:48 PAGE 3   

 115   1        unsigned char temp3 = 0;
 116   1        unsigned char temp4 = 0;
 117   1        temp1 = 0x80 | ((hour / 10) << 4) | (hour % 10);
 118   1        temp2 = 0x80 | ((min / 10) << 4) | (min % 10);
 119   1        temp3 = 0x80 | weekday;
 120   1        temp4 = 0x80 | ((day / 10) << 4) | (day % 10);
 121   1        if(mode == ALARM_EVERYDAY || mode == ALARM_ONCE)
 122   1        {
 123   2          temp1 &= ~0x80;
 124   2          temp2 &= ~0x80;
 125   2        }
 126   1        else if(mode == ALARM_WORKDAY)
 127   1        {
 128   2          temp1 &= ~0x80;
 129   2          temp2 &= ~0x80;
 130   2          temp3 &= ~0x80;
 131   2        }
 132   1        else if(mode == ALARM_SPECIFIC_DAY)
 133   1        {
 134   2          temp1 &= ~0x80;
 135   2          temp2 &= ~0x80;
 136   2          temp4 &= ~0x80;
 137   2        }
 138   1        PCF8563WriteByte(HOUR_ALARM, temp1);
 139   1        PCF8563WriteByte(MINUTE_ALARM, temp2);
 140   1        PCF8563WriteByte(WEEKDAY_ALARM, temp3);
 141   1        PCF8563WriteByte(DAY_ALARM, temp4);
 142   1        PCF8563SetRegisterBits(CONTROL_STATUS_2, 0x02, 1);  //使能时钟中断输出
 143   1      }
 144          /**
 145            * @brief  清除PCF8563内部闹钟标志位
 146            *         闹钟中断产生后，必须清除标志位后下一次才能正常工作
 147            * @param  无
 148            * @retval 无
 149            */
 150          void PCF8563ClearAlarmFlag(void)
 151          {
 152   1        PCF8563SetRegisterBits(CONTROL_STATUS_2, 0x08, 0);
 153   1      }
 154          /**
 155            * @brief  关闭闹钟
 156            * @param  无
 157            * @retval 无
 158            */
 159          void PCF8563DisableAlarm(void)
 160          {
 161   1        PCF8563SetRegisterBits(HOUR_ALARM, 0x80, 1);
 162   1        PCF8563SetRegisterBits(MINUTE_ALARM, 0x80, 1);
 163   1        PCF8563SetRegisterBits(WEEKDAY_ALARM, 0x80, 1);
 164   1        PCF8563SetRegisterBits(DAY_ALARM, 0x80, 1);
 165   1        PCF8563SetRegisterBits(CONTROL_STATUS_2, 0x08, 0);
 166   1      }
 167          /**
 168            * @brief  使能PCF8563内部计时器，并打开中断
 169            * @param  clock_fq：PCF8563内部计时器的时钟源
 170            *           TIMERCLK_4096_HZ  4.096khz
 171            *           TIMERCLK_64_HZ    64hz
 172            *           TIMERCLK_1_HZ     1hz
 173            *           TIMERCLK_1_60_HZ  1/60hz
 174            *         value：倒计时的值
 175            * @retval 无
 176            */
C51 COMPILER V9.54   PCF8563                                                               12/04/2020 22:56:48 PAGE 4   

 177          void PCF8563EnableTimer(unsigned char clock_fq, unsigned char value)
 178          {
 179   1        PCF8563SetRegisterBits(TIMER_CONTROL, 0x80, 0); //关闭定时器
 180   1        PCF8563WriteByte(TIMER_CONTROL, clock_fq);      //设置定时器的时钟源
 181   1        PCF8563WriteByte(TIMER, value);                 //设置定时器的初值
 182   1        PCF8563SetRegisterBits(CONTROL_STATUS_2, 0x01, 1);  //打开中断输出
 183   1        PCF8563SetRegisterBits(TIMER_CONTROL, 0x80, 1);     //打开定时器
 184   1      }
 185          /**
 186            * @brief  清除PCF8563内部计时器标志位
 187            *         倒计时计时器中断产生后，必须清除标志位后下一次才能正常工作
 188            * @param  无
 189            * @retval 无
 190            */
 191          void PCF8563ClearTimerFlag(void)
 192          {
 193   1        PCF8563SetRegisterBits(CONTROL_STATUS_2, 0x04, 0);
 194   1      }
 195          /**
 196            * @brief  关闭PCF8563内部计时器
 197            * @param  无
 198            * @retval 无
 199            */
 200          void PCF8563DisableTimer(void)
 201          {
 202   1        PCF8563SetRegisterBits(CONTROL_STATUS_2, 0x01, 0);  //关闭中断输出
 203   1        PCF8563SetRegisterBits(TIMER_CONTROL, 0x80, 0);     //关闭定时器
 204   1      }
 205          /**
 206            * @brief  读PCF8563中断源
 207            * @param  无
 208            * @retval temp：PCF8563内部状态寄存器的值
 209            */
 210          unsigned char PCF8563ReadIntSrc(void)
 211          {
 212   1        unsigned char temp;
 213   1        temp = PCF8563ReadByte(CONTROL_STATUS_2);
 214   1        temp &= 0x0c;
 215   1        return temp;
 216   1      }
 217          /**
 218            * @brief  使能PCF8563的时钟输出
 219            * @param  clock_fq：输出的时钟频率
 220            *             CLKOUT_32768_HZ   32.768khz
 221            *             CLKOUT_1024_HZ    1.924khz
 222            *             CLKOUT_32_HZ      32hz
 223            *             CLKOUT_1_HZ       1hz
 224            *         en：ENABLE_CLKOUT     使能时钟输出
 225            *             DISABLE_CLKOUT    禁止时钟输出
 226            * @retval 无
 227            */
 228          void PCF8563EnableClockOuput(unsigned char clock_fq, unsigned char en)
 229          {
 230   1        PCF8563WriteByte(CLKOUT_CONTROL, (en << 7) | clock_fq);
 231   1      }
 232          void PCF8563Init(void)
 233          {
 234   1        PCF8563ClearAlarmFlag();
 235   1        PCF8563ClearTimerFlag();
 236   1        PCF8563EnableTimer(TIMERCLK_1_60_HZ, 1);
 237   1        //PCF8563DisableTimer();
 238   1        PCF8563EnableClockOuput(CLKOUT_1024_HZ, DISABLE_CLKOUT);
C51 COMPILER V9.54   PCF8563                                                               12/04/2020 22:56:48 PAGE 5   

 239   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    894    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
